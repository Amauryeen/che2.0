// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// Enums

enum UserStatus {
  active
  inactive
}

enum MeetingStatus {
  started
  planned
  ended
  cancelled
}

enum MeetingPresence {
  present
  excused
  unknown
}

enum DocumentStatus {
  pinned
  effective
  archived
}

enum VoteStatus {
  started
  planned
  ended
  cancelled
}

enum VoteValue {
  for
  against
  abstain
}

// Models

model User {
  id               Int               @id @default(autoincrement())
  status           UserStatus        @default(active)
  email            String            @unique
  firstName        String
  lastName         String
  roles            UserRole[]
  meetings         MeetingAttendee[] @relation(name: "MeetingAttendeeUser")
  procurations     MeetingAttendee[] @relation(name: "MeetingAttendeeProcurer")
  votes            VoteUser[]
  createdDocuments Document[]
  createdMeetings  Meeting[]
  createdVotes     Vote[]
  createdUsers     User[]            @relation(name: "UserCreator")
  createdAt        DateTime          @default(now())
  creatorId        Int?
  creator          User?             @relation(name: "UserCreator", fields: [creatorId], references: [id])
  updatedAt        DateTime          @default(now())
  lastLogin        DateTime?
}

model Role {
  id        Int            @id @default(autoincrement())
  name      String
  users     UserRole[]
  documents DocumentRole[]
  votes     VoteRole[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Document {
  id          Int               @id @default(autoincrement())
  status      DocumentStatus    @default(effective)
  title       String
  description String
  name        String
  type        String
  url         String
  meetings    MeetingDocument[]
  roles       DocumentRole[]
  createdAt   DateTime          @default(now())
  creatorId   Int?
  creator     User?             @relation(fields: [creatorId], references: [id])
  updatedAt   DateTime          @default(now())
}

model DocumentRole {
  id         Int      @id @default(autoincrement())
  documentId Int
  document   Document @relation(fields: [documentId], references: [id])
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Meeting {
  id          Int               @id @default(autoincrement())
  status      MeetingStatus     @default(planned)
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  location    String?
  url         String?
  attendees   MeetingAttendee[]
  documents   MeetingDocument[]
  votes       Vote[]
  createdAt   DateTime          @default(now())
  creatorId   Int?
  creator     User?             @relation(fields: [creatorId], references: [id])
  updatedAt   DateTime          @default(now())
}

model MeetingAttendee {
  id         Int             @id @default(autoincrement())
  meetingId  Int
  meeting    Meeting         @relation(fields: [meetingId], references: [id])
  userId     Int
  user       User            @relation(name: "MeetingAttendeeUser", fields: [userId], references: [id])
  presence   MeetingPresence @default(unknown)
  procurerId Int?
  procurer   User?           @relation(name: "MeetingAttendeeProcurer", fields: [procurerId], references: [id])
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now())
}

model MeetingDocument {
  id         Int      @id @default(autoincrement())
  meetingId  Int
  meeting    Meeting  @relation(fields: [meetingId], references: [id])
  documentId Int
  document   Document @relation(fields: [documentId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Vote {
  id           Int        @id @default(autoincrement())
  status       VoteStatus @default(planned)
  meetingId    Int
  meeting      Meeting    @relation(fields: [meetingId], references: [id])
  title        String
  description  String
  anonymous    Boolean    @default(false)
  votesFor     Int        @default(0)
  votesAgainst Int        @default(0)
  votesAbstain Int        @default(0)
  users        VoteUser[]
  roles        VoteRole[]
  createdAt    DateTime   @default(now())
  creatorId    Int?
  creator      User?      @relation(fields: [creatorId], references: [id])
  updatedAt    DateTime   @default(now())
}

model VoteRole {
  id        Int      @id @default(autoincrement())
  voteId    Int
  vote      Vote     @relation(fields: [voteId], references: [id])
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model VoteUser {
  id        Int        @id @default(autoincrement())
  voteId    Int
  vote      Vote       @relation(fields: [voteId], references: [id])
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  value     VoteValue?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}
